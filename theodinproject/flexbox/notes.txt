# Useful flexbox cheatsheet:
    - https://flexbox.malven.co/
    - https://css-tricks.com/snippets/css/a-guide-to-flexbox/
    

# to enable flexbox model on an element and make it a flex container -> declare "display: flex;" on element
# flex items are items nested within a flex container

# 'flex' is a shorthand property for 3 other properties; i.e., it sets the values for 3 other properties simultaneously
    - flex-grow: 1;
    - flex-shrink: 1;
    - flex-basis: 0;
    - so "flex: 1" = "flex: 1 1 0;" -> 1 is applied to flex-grow value, flex-shrink and flex-basis are 1 and 0 by default

# flex-grow: flex item's growth factor
    - if all flex items have flex-grow: 1, then they will all increase in size proportionally

# flex-shrink: flex item's shrink factor
    - effective when flex items are altogether larger than their parent container (e.g. 3 div elements of size 100px in a flex container size less than 300px)
    - flex-shrink: 1 on all items means all will shrink evenly; 0 means item will NOT shrink and >1 means it will shrink at a faster rate than normal

# flex items do NOT necessarily respect given values for width
    - if window/parent is big enough, items will grow to fit it according to specified growth factor; if too small, items will shrink to fit according to specified shrink factor

# flex-basis: sets initial size of flex item; defines the size of an element before remaining space is distributed.
    - setting value to auto tells item to check for width declaration; otherwise if set to 0, item will ignore declared width and everything would shrink evenly
    - another way to think about it if flex-basis: 0 -> all flex-growing and flex-shrinking begin their calculations from the flex-item's default element height or width (0 for div) depending on whether flex-direction (main axis) is vertical or horizontal
    - flex-basis: auto -> tells flex items to default to their given/declared height

# Flex containers have 2 axes: the main axis and the cross axis
    - property flex-direction specifies whether the main axis is horizontal (value = row) or vertical (value = column)
    - default main axis is horizontal (flex-direction: row;)

# Alignment properties: declared within flex container (IMPORTANT)

# property: justify-content
    - aligns items across the main axis
    - value: space-between 
        > spaces out elements in container equally across the main axis, conserving their original size
    - value: center
        > places elements at the center of containger

# property: align-items
    - aligns items along the cross axis
    - if flex direction is horizontal/row (the default), then align-items places elements vertically and vice versa.
    - possible values include the same ones employed by justify-content

# property: gap
    - adds a specified space between flex items, similar to adding margin to the items themselves

--------------------------------------------------------------------
Page: https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/

# CSS is comprised of different layout algorithms known as "layout modes" (e.g. flow layout, flexbox, etc.)
    > each are designed to solve a specific problem
# Default layout mode is Flow layout
    > meant to create digital documents like Microsoft Word documents
# Flexbox is about flexibility
    > reigns supreme for dynamic, fluid UIs that arrange items in a vertical or horizontal list

# flex-direction: row -> primary axis runs horizontally
# flex-direction: column -> primary axis runs vertically
# In Flexbox, everything is based on the primary axis (which thereby dictates what the cross axis is)
# Children elements (within a flex container) will be positioned by default according to 2 rules:
    1. Primary axis: children will be bunched up at the start of the container
    2. Cross axis: children will stretch out to fill the entire container

# justify-content values:
    1. flex-start
    2. center
    3. flex-end
    4. space-between
    5. space-around
    6. space-evenly

# align-items values:
    1. stretch
    2. flex-start
    3. center
    4. flex-end
    5. baseline

# align-self property is applied to the child element, not the container
    > changes the alignment of a specific child along the cross axis
    > same values as align-items

# there is no justify-self -> why? | further, why is it justify-content and align-items, and not justify-items, or align-content?
    > for alignment in the cross axis, each item can do whatever it wants; there is only one element in each item's respective cross axis (if flex-wrap is not active)
    > in the primary axis, however, we can only think about how to distribute the group; an item interacts with other items along the axis

# With this in mind, here are definitions for the 4 terms:
    1. justify: to position something along the primary axis
    2. align: to position something along the cross axis
    3. content: a group of stuff that can be distributed
    4. single items that can be positioned individually

# align-content does, however, exist -> involved with the flex-wrap property

# In Flexbox, the width property is implemented differently -> it reflects the hypothetical size of the element when unconstrained

* It is best to think of CSS as input for the various layout modes / algorithms that are included within it
    > each property-value pair may be processed differently according to the layout mode specified

# flex-grow specifies how the extra space is distributed when the items are smaller than their container
    > default value is 0 -> which means that growing is optional; if we want extra space to be used, then we have to specify it to do so with a value > 0
    > flex items will grow proportionally based on their flex-grow value

# flex-shrink specifies how space is removed when the items are bigger than their container
    > e.g. a container is shrunk by 100px; if one element has a flex-shrink value of 3 and another 1, then the 1st element will shrink by 75px while the other 25px
    > flex-shrink: 0 -> "opt-out" of shrinking process altogether

# by the nature of the two properties, either flex-grow or flex-shrink is active and not both

# If flex-direction is row -> flex-basis affects width; if flex-direction is column -> flex-basis affects height 
    > flex-basis allows us to set the hypothetical size of an element in the primary-axis direction

# Flexbox algorithm refuses to shrink a child below its minimum size no matter how high flex-shrink is set to
    > for an element containing text, the minimum width is the length of the longest unbreakable string of characters
    > consider setting min-width to 0px to solve element overflows when reducing size of a container or when elements are bigger than the container

# gap property specifies amount of space in-between each Flex child
    > great for navigation headers

# auto margins gobble up extra space and apply it to the element's margin

# flex-wrap: wrap -> items won't shrink below their hypothetical size
    > each row acts as its own mini flex container